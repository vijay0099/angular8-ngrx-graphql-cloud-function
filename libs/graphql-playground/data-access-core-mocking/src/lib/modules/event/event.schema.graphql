type Query {
  getAllEvents: [Event!]!
  getEventById(id: String): Event!
}

type Mutation {
  createVolunteerEvent(data: VolunteerInput!): Event!
  createSponsorEvent(data: SponsorInput!): Event!
  createSupporterEvent(data: SupporterInput!): Event!
}

# type Event implements EventInterface {
type Event {
  eventType: EventType!
  id: ID!
  title: String!
  subtitle: String
  isActive: Boolean!

  # eventLogo: String!
  # labor: Boolean!
  # items: Boolean!
  # money: Boolean!

  # frequency: String
  # needType: String!
  # paymentFrequency: String!
  # description: String
  # shortDescription: String
  # startDate: String!
  # endDate: String!
  # startTime: String!
  # endTime: String!
  # location: String
  # volunteerJob: String
  # volunteerNumber: Int

  # isDeleted: Boolean
  # createdAt: String!
  # updatedAt: String
}

input EventInput {
  id: String!
  eventType: EventType
}

input VolunteerInput {
  # id: ID!
  eventType: EventType = VOLUNTEER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  # eventLogo: String!
  # labor: Boolean!
  # items: Boolean!
  # money: Boolean!

  # frequency: String
  # needType: String!
  # paymentFrequency: String!
  # description: String
  # shortDescription: String
  # startDate: String!
  # endDate: String!
  # startTime: String!
  # endTime: String!
  # location: String
  # volunteerJob: String
  # volunteerNumber: Int

  # isDeleted: Boolean
  # createdAt: String!
  # updatedAt: String
}

input SupporterInput {
  # id: ID!
  eventType: EventType = SUPPORTER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  # eventLogo: String!
  # labor: Boolean!
  # items: Boolean!
  # money: Boolean!

  # frequency: String
  # needType: String!
  # paymentFrequency: String!
  # description: String
  # shortDescription: String
  # volunteerJob: String
  # volunteerNumber: Int

  # isDeleted: Boolean
  # createdAt: String!
  # updatedAt: String
}

input SponsorInput {
  # id: ID!
  eventType: EventType = SPONSOR_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  # eventLogo: String!
  # labor: Boolean!
  # items: Boolean!
  # money: Boolean!

  # frequency: String
  # needType: String!
  # paymentFrequency: String!
  # description: String
  # shortDescription: String
  # location: String
  # volunteerJob: String
  # volunteerNumber: Int

  # isDeleted: Boolean
  # createdAt: String!
  # updatedAt: String
}

enum EventType {
  SUPPORTER_EVENT
  SPONSOR_EVENT
  VOLUNTEER_EVENT
}

interface EventInterface {
  id: ID!
}
