type Query {
  getEvents: [Event!]!
  getEvent(id: String): Event!
}

type Mutation {
  createVolunteerEvent(data: VolunteerInput!): Event!
  createSponsorEvent(data: SponsorInput!): Event!
  createSupporterEvent(data: SupporterInput!): Event!

  updateVolunteerEvent(data: VolunteerUpdateInput!): Event!
  updateSponsorEvent(data: SponsorUpdateInput!): Event!
  updateSupporterEvent(data: SupporterUpdateInput!): Event!

  deleteEvent(id: String!): Event!
}

# type Event implements EventInterface {
type Event {
  eventType: EventType!
  id: ID!
  title: String!
  subtitle: String

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  startDate: String!
  endDate: String!
  startTime: String!
  endTime: String!
  location: String
  volunteerJob: String
  volunteerNumber: Int

  isActive: Boolean!
  isDeleted: Boolean
  createdAt: String!
  updatedAt: String

  createdBy: User!
}

input VolunteerInput {
  eventType: EventType = VOLUNTEER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  startDate: String!
  endDate: String!
  startTime: String!
  endTime: String!
  location: String
  volunteerJob: String
  volunteerNumber: Int
  createdBy: ID!
}

input SupporterInput {
  eventType: EventType = SUPPORTER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  volunteerJob: String
  volunteerNumber: Int
  createdBy: ID!
}

input SponsorInput {
  eventType: EventType = SPONSOR_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  location: String
  volunteerJob: String
  volunteerNumber: Int

  createdBy: ID!
}

input VolunteerUpdateInput {
  id: ID!
  eventType: EventType = VOLUNTEER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  startDate: String!
  endDate: String!
  startTime: String!
  endTime: String!
  location: String
  volunteerJob: String
  volunteerNumber: Int
  createdBy: ID!
}

input SupporterUpdateInput {
  id: ID!
  eventType: EventType = SUPPORTER_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  volunteerJob: String
  volunteerNumber: Int
  createdBy: ID!
}

input SponsorUpdateInput {
  id: ID!
  eventType: EventType = SPONSOR_EVENT
  title: String!
  subtitle: String
  isActive: Boolean!

  eventLogo: String!
  labor: Boolean!
  items: Boolean!
  money: Boolean!

  frequency: String
  needType: String!
  paymentFrequency: String!
  description: String
  shortDescription: String
  location: String
  volunteerJob: String
  volunteerNumber: Int

  createdBy: ID!
}

enum EventType {
  SUPPORTER_EVENT
  SPONSOR_EVENT
  VOLUNTEER_EVENT
}

#interface EventInterface {
#  id: ID!
#}
