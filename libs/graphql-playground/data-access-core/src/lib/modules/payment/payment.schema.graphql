type Query {
  getPayment(id: String!): Payment!
  getPayments: [Payment!]!
}

type Mutation {
  createPayment(data: PaymentInput!): Payment!
  updatePayment(data: PaymentUpdateInput): Payment!
  deletePayment(id: String!): Payment!
}

type Payment {
  id: ID!
  paymentType: String!
  isLabeled: Boolean!
  amount: Float!
  currency: String!
  remarks: String!
  status: String!
  createdAt: String!
  updatedAt: String!
  # JOINTS
  user: User!
  event: Event!
  createdBy: User!
}

input PaymentInput {
  paymentType: PaymentTypes!
  isLabeled: Boolean!
  amount: Float!
  currency: String!
  remarks: String
  status: PaymentStatus!
  # JOINTS
  user: ID!
  eventId: ID!
  createdBy: ID!
}

input PaymentUpdateInput {
  id:ID!
  paymentType: PaymentTypes
  isLabeled: Boolean!
  amount: Float!
  currency: String!
  remarks: String
  status: PaymentStatus!
  # JOINTS
  user: ID!
  eventId: ID!
}

enum PaymentTypes {
  P1
  P2
}

enum PaymentStatus {
  PENDING
  PAID
}